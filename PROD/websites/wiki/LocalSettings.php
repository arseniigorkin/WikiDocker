<?php
//error_reporting( -1 ); // Debug
//ini_set( 'display_errors', 1 ); / Debug
# This file was automatically generated by the MediaWiki 1.39.3
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See docs/Configuration.md for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
    exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Магистраль - Wiki";
$wgMetaNamespace = "Магистраль_wiki";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
// $wgServer = "http://wiki.gpid.ru";
$wgServer = getenv('WIKI_SITE_PROTOCOL').getenv('WIKI_SITE_URL');

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
    '1x' => "$wgResourceBasePath/resources/assets/logo.png",
    'icon' => "$wgResourceBasePath/resources/assets/logo.png",
];

$wgArticlePath = "/index.php/$1";

//$wgDebugLogFile = "/var/www/wiki/logs/mw.log";

## UPO means: this is also a user preference option

$wgEnableEmail = false;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "";
$wgPasswordSender = "";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "wiki.db";
$wgDBname = "gpidru_wiki";
$wgDBuser = "gpidru_wiki";
$wgDBpassword = "B6#HA7N&bwNayB1";

# MySQL specific settings
$wgDBprefix = "wiki";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
//$wgMainCacheType = CACHE_ACCEL;
//$wgMemCachedServers = [];

$wgMainCacheType = CACHE_NONE;
$wgCachePages = false;
$wgEnableParserCache = false;
$wgQueryCacheLimit = 0;
$wgCacheVaryCookies = [];
$wgCacheVaryHeaders = [];
$wgUseKeyHeader = false;
$wgResourceLoaderUseObjectCacheForDeps = false;

$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "ru";
//$wgLanguageCode = "gb";

# CSS path
$wgCSSPath = '';

$wgHooks['BeforePageDisplay'][] = function( OutputPage &$out, Skin &$skin ) {

$wgHooks['BeforePageDisplay'][] = function( OutputPage &$out, Skin &$skin ) {
    $out->addScriptFile( '/js/bpmn-navigated-viewer.development.js' );
};

$wgHooks['MimeMagicInit'][] = static function ( MimeAnalyzer $mime ) {
    $mime->addExtraTypes( 'application/xml bpmn' );
};

$wgHooks['BeforePageDisplay'][] = function( OutputPage &$out, Skin &$skin ) {
    $out->addStyle( '/css/fontawesome/css/regular.css' );
    $out->addStyle( '/css/jquery-ui.css' );
    $out->addStyle( '/css/fontawesome/css/solid.css' );
    $out->addStyle( '/css/fontawesome/css/fontawesome.css' );
};

// Добавляем справку в футер
$wgHooks['SkinAddFooterLinks'][] = function ( Skin $skin, string $key, array &$footerlinks ) {

    if ( $key === 'places' ) {
        $footerlinks['helper-page'] = $skin->footerLink( 'Help-link-text', 'Help-Link' );
        $footerlinks['glossary-page'] = $skin->footerLink( 'Glossary-link-text', 'Glossary-Link' );
    };
};

$wgUploadDirectory = '/var/www/wiki/uploads';
$wgUploadPath = '/uploads';
$wgFileExtensions[] = 'bpmn';


# Time zone
$wgLocaltimezone = "UTC";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = "bc82cecb014c463df8c107e09f6d2a36eaac916590e84066b5f8a938a4e558fd";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "432248ca900594ef";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
//$wgGroupPermissions['*']['createaccount'] = false; // разрешает регистрацию пользователей
//$wgGroupPermissions['sysop']['createaccount'] = true; // разрешает регистрировать новых пользователей админам
//$wgGroupPermissions['*']['edit'] = false;
//$wgGroupPermissions['*']['read'] = false; // позволяет анонимным пользователям просмотривать вики (включая страницу регистрации, если такая есть)
$wgAddGroups['sysop'] = ['bureaucrat', 'sysop'];
$wgRemoveGroups['sysop'] = ['bureaucrat', 'sysop'];

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "Medik";
#$wgMedikColor  = "#347291";

# Enabled skins.
# The following skins were automatically enabled:
// wfLoadSkin( 'MinervaNeue' );
// wfLoadSkin( 'MonoBook' );
// wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );
wfLoadSkin( 'Medik' );

// Включает бета-функци (visual-diff view):
//$wgVisualEditorEnableDiffPageBetaFeature = true;
$wgVisualEditorEnableDiffPage = true;

// DEBUG //

// $wgShowExceptionDetails = true;
// $wgDebugDumpSql = true;
// $wgShowSQLErrors = true;
// $wgShowDBErrorBacktrace = true;
//$wgDebugToolbar = true;
//$wgShowDebug = true;
//$wgDevelopmentWarnings = true;
//$wgShowExceptionDetails = true;
$wgDebugLogFile = "/var/www/wiki/logs/debug-{$wgDBname}.log";


////////////////// <ActiveDirectorty интеграция> /////////////////
///

wfLoadExtension( 'LDAPSyncAll' );
wfLoadExtension( 'Auth_remoteuser' );

$GLOBALS['LDAPSyncAllBlockExecutorUsername'] = 'Lvl80admin';
$wgPluggableAuth_EnableLocalLogin = true; // поля входа для локальных пользователей (тех, которые созданы под mediawiki)
$LDAPAuthentication2AllowLocalLogin = true; // --ditto --

// Create Wiki-Group 'developer' from default user group
//$wgGroupPermissions['developer'] = $wgGroupPermissions['user'];

// Safe IP or not (for bypassing external login via AD)
$safeIPs = array('127.0.0.1','localhost');
$ipsVars = array('HTTP_X_FORWARDED_FOR','HTTP_X_REAL_IP','REMOTE_ADDR');
foreach ($ipsVars as $ipsVar) {
    if (isset($_SERVER[$ipsVar]) && mb_strlen($_SERVER[$ipsVar]) > 3 ) { $wikiRequestIP = $_SERVER[$ipsVar]; break; }
}
$wikiRequestSafe = ( isset($wikiRequestIP ) && ( in_array($wikiRequestIP,$safeIPs) ));



// Load LDAP Config from JSON
$ldapJsonFile = "/var/www/wiki/private.wiki/ldap.json";
$ldapConfig = false;
if (is_file($ldapJsonFile) && is_dir("$IP/extensions/LDAPProvider")) {
    $testJson = @json_decode(file_get_contents($ldapJsonFile),true);
    if (is_array($testJson)) {
        $ldapConfig = true;
    } else {
        error_log("Found invalid JSON in file: /var/www/wiki/private.wiki/ldap.json");
    }
}

// Private Wiki. External LDAP login. Default NS requires login.
$wgPluggableAuth_EnableAutoLogin = false; // автоматический вход в wiki
$wgPluggableAuth_EnableLocalProperties = true; // пользователи могут изменять email и имя при LDAP входе
$wgEmailConfirmToEdit = false;
$wgGroupPermissions['developer']['edit'] = false;
$wgGroupPermissions['autoconfirmed']['editsemiprotected'] = false; // убираем встроенное право редактировать для автоподтрелждённых пользоателей
$wgGroupPermissions['autoconfirmed']['edit'] = false; // убираем право редактировать для автоподтрелждённых пользоателей
$wgGroupPermissions['developer']['read'] = true;
$wgGroupPermissions['*']['read'] = false;
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['*']['createpage'] = false;
$wgGroupPermissions['*']['writeapi'] = false;
$wgGroupPermissions['*']['createpage'] = false;
$wgGroupPermissions['*']['createtalk'] = false;
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['sysop']['createaccount'] = true;
$wgGroupPermissions['*']['autocreateaccount'] = true;
//$wgGroupPermissions['developer']['applychangetags'] = false;
$wgBlockDisablesLogin = true;



// Activate Extension
//if ( $ldapConfig ) {
wfLoadExtension( 'PluggableAuth' );
wfLoadExtension( 'LDAPAuthentication2' );
wfLoadExtension( 'LDAPAuthorization' );
wfLoadExtension( 'LDAPUserInfo' );
wfLoadExtension( 'LDAPGroups' );
wfLoadExtension( 'LDAPProvider' );
$LDAPProviderDomainConfigs = $ldapJsonFile;
//    $wgPluggableAuth_ButtonLabel = "Войти с через gpbs.ru";
$wgPluggableAuth_Config['Войти через gpbs.ru'] = [
    'plugin' => 'LDAPAuthentication2',
    'data' => [
        'domain' => 'gpbs.ru'
    ]
];

$wgPluggableAuth_Class = "MediaWiki\\Extension\\LDAPAuthentication2\\PluggableAuth";
//    $wgPluggableAuth_ButtonLabel = "Log In (PluggableAuth)";
//    $wgPluggableAuth_Config = array(
//        array('plugin' => 'LDAPAuthentication2'),
//        array('plugin' => 'LDAPAuthorization'),
////        array('plugin' => 'LDAPUserInfo'),
////        array('plugin' => 'LDAPGroups'),
////        array('plugin' => 'LDAPProvider')
//    );



// Force LDAPGroups to sync by choosing a domain (e.g. first JSON object in ldap.json)
$LDAPProviderDefaultDomain = "gpbs.ru";

if ($wikiRequestSafe) { $LDAPAuthentication2AllowLocalLogin = true; }
//}


// DEBUG для AD //
$wgDebugLogGroups['PluggableAuth'] = '/var/www/wiki/logs/PluggableAuth.log';
$wgDebugLogGroups['LDAP'] = '/var/www/wiki/logs/LDAP.log';
$wgDebugLogGroups['MediaWiki\\Extension\\LDAPProvider\\Client'] = '/var/www/wiki/logs/LDAPClient.log';
$wgDebugLogGroups['LDAPGroups'] = '/var/www/wiki/logs/LDAPGroups.log';
$wgDebugLogGroups['LDAPUserInfo'] = '/var/www/wiki/logs/LDAPUserInfo.log';
$wgDebugLogGroups['LDAPAuthentication2'] = '/var/www/wiki/logs/LDAPAuthentication2.log';
$wgDebugLogGroups['LDAPAuthorization'] = '/var/www/wiki/logs/LDAPAuthorization.log';
$wgDebugLogGroups['exception'] = '/var/www/wiki/logs/exceptions.log';
$wgDebugLogGroups['error'] = '/var/www/wiki/logs/errors.log';
$wgDebugLogGroups['Auth_remoteuser'] = '/var/www/wiki/logs/Auth_remoteuser.log';
$wgDebugLogGroups['LDAPProvider'] = '/var/www/wiki/logs/LDAPProvider.log';

//$wgLDAPGroupsSyncMechanismRegistry = "\\MediaWiki\\Extension\\LDAPGroups\\SyncMechanism\\MappedGroups::factory";
$LDAPAuthentication2UsernameNormalizer = 'strtolower';

///////////////// </ActiveDirectorty интеграция> /////////////////


$wgUserMergeProtectedGroups = [];
$wgGroupPermissions['sysop']['usermerge'] = true;
$wgGroupPermissions['sysop']['usermerge'] = true;
$wgGroupPermissions['sysop']['deletelogentry'] = true;
$wgGroupPermissions['sysop']['deleterevision'] = true;


# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtension( 'ExtensionName' );
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:
wfLoadExtension( 'CategoryTree' );
//wfLoadExtension( 'Cite' );
wfLoadExtension( 'CSS' );
//wfLoadExtension( 'CiteThisPage' );
wfLoadExtension( 'CodeEditor' );
wfLoadExtension( 'Gadgets' );
//wfLoadExtension( 'ImageMap' );
wfLoadExtension( 'InputBox' );
wfLoadExtension( 'Interwiki' );
wfLoadExtension( 'Math' );
//wfLoadExtension( 'MultimediaViewer' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'OATHAuth' );
wfLoadExtension( 'PageImages' );
wfLoadExtension( 'ParserFunctions' );
wfLoadExtension( 'PdfHandler' );
//wfLoadExtension( 'Poem' );
wfLoadExtension( 'Renameuser' );
wfLoadExtension( 'ReplaceText' );
//wfLoadExtension( 'Scribunto' );
wfLoadExtension( 'SecureLinkFixer' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'TextExtracts' );
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'WikiEditor' );
#wfLoadExtension( 'TinyMCE' );
#$wgTinyMCEEnabled = false;
wfLoadExtension( 'UserMerge' );
wfLoadExtension('VCSystem');
wfLoadExtension( 'ElectronPdfService' );
$wgElectronPdfServiceRESTbaseURL = '/pdf/';

# End of automatically generated settings.
# Add more configuration options below.

